# model.py
from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime

# User Model
class User(BaseModel):
    """
    Represents a user in the chat application.
    'id' will be the primary key from the database.
    'password' will be stored as a hash.
    """
    id: Optional[int] = Field(None, description="Unique identifier for the user (auto-generated by database).")
    email: str = Field(..., description="User's email address, used for login.")
    password: str = Field(..., description="User's password (will be stored as a hash).")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp when the user account was created.")

# ChatSession Model
class ChatSession(BaseModel):
    """
    Represents a single chat conversation session between a user and the AI.
    A user can have multiple sessions.
    """
    id: Optional[int] = Field(None, description="Unique identifier for the chat session (auto-generated by database).")
    user_id: int = Field(..., description="The ID of the user who owns this chat session.")
    title: str = Field(..., description="A short title for the chat session (e.g., 'Discussion about AI ethics').")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp when the chat session was created.")
    updated_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp of the last message in the session.")

# ChatMessage Model
class ChatMessage(BaseModel):
    """
    Represents a single message within a chat session.
    Messages can be from the user (prompt) or the AI (response).
    """
    id: Optional[int] = Field(None, description="Unique identifier for the chat message (auto-generated by database).")
    session_id: int = Field(..., description="The ID of the chat session this message belongs to.")
    role: str = Field(..., description="Role of the message sender (e.g., 'user', 'assistant').") # OpenAI uses 'assistant'
    content: str = Field(..., description="The text content of the message.")
    timestamp: datetime = Field(default_factory=datetime.utcnow, description="Timestamp when the message was created.")

# --- Request/Response Models for API Endpoints ---

# For user signup request
class UserCreate(BaseModel):
    email: str = Field(..., description="User's email address.")
    password: str = Field(..., min_length=6, description="User's password (minimum 6 characters).")

# For user login request
class UserLogin(BaseModel):
    email: str = Field(..., description="User's email address.")
    password: str = Field(..., description="User's password.")

# For user response (after login/signup, without password hash)
class UserResponse(BaseModel):
    id: int
    email: str
    created_at: datetime

# For chat completion request
class ChatCompletionRequest(BaseModel):
    session_id: Optional[int] = Field(None, description="Optional: ID of an existing chat session to continue. If not provided, a new session is created.")
    message: str = Field(..., description="The user's prompt for the AI.")

# For chat completion response
class ChatCompletionResponse(BaseModel):
    session_id: int
    message_id: int
    role: str
    content: str
    timestamp: datetime

# For token response
class Token(BaseModel):
    access_token: str
    token_type: str
